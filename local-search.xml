<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>一些小技巧</title>
    <link href="/2024/04/16/some-problems/"/>
    <url>/2024/04/16/some-problems/</url>
    
    <content type="html"><![CDATA[<h1>For Fluid</h1><ul><li><div align = 'center'><a class="btn" href="https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97"  title="Manual of Fluid" target="_blank">Manual</a></div></li><li><div align = 'center'><a class="btn" href="https://blog.kevinchu.top/2023/07/17/hexo-theme-fluid-modify/"  target="_blank">魔改记录</a></div></li></ul><div class="note note-success">            <p>To be Conninud…<br>记录自己所有魔改…</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Tips</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/16/hello-world/"/>
    <url>/2024/04/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CA-Midterm_1-Review</title>
    <link href="/2024/04/12/CA-Midterm-1-Review/"/>
    <url>/2024/04/12/CA-Midterm-1-Review/</url>
    
    <content type="html"><![CDATA[<h1>Midterm_1 Review</h1><h1>OverAll</h1><div align="center"><a class="btn" href="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/index.html"  title="CS110 Spring 2024" target="_blank">Course page</a></div><h2 id="Floating-point-number">Floating point number</h2><div align="center"><img src="/img/CA-Midterm-1-Review/1712645138443.png" style="max-height:250px; width:auto;"></div><p>$$<br>\begin{align}<br>&amp;S = (-1)^{\text{Sign}}\\<br>&amp;E = \text{Exponent}_2-127_{10}\\<br>&amp;Value = S\times M\times2^E<br>\end{align}<br>$$</p><div align="center"><img src="/img/CA-Midterm-1-Review/1712645707931.png" style="max-height:250px; width:auto;"><figcaption>Summary</figcaption></div><div class="note note-warning">            <p><strong>Tips</strong>:<br>Abt denorms: Normalization and hidden 1 is to blame!<br>The exponent of denorms: $E := -126$</p>          </div><h2 id="How-C-works">How C works?</h2><h3 id="C-Compilation-Simplified-Overview">C Compilation Simplified Overview</h3><ul><li>Generally a two part process of compiling <code>.c</code> files to <code>.o</code> files, then linking the <code>.o</code> files into executables;</li><li>Assembling is also done (but is hidden, i.e., done automatically, by default);</li></ul><div align="center"><img src="/img/CA-Midterm-1-Review/1712647862392.png" style="max-height:450px; width:auto;"></div><p><strong>E.G</strong></p><div align="center""><img src="/img/CA-Midterm-1-Review/1712657012853.png" style="max-height: 450px; width:auto;"><figcaption>Something abt macro constant</figcaption></div><blockquote><p>PI: no type.</p></blockquote><h3 id="Pointer">Pointer</h3><p>Just remember to initialize it, or it can point to “garbage”.</p><h3 id="Array">Array</h3><p>The difference between <code>char string1[] = &quot;abc&quot;</code> , <code>char string2[3] = &quot;abc&quot;  </code>and <code>char *string3 = &quot;abc&quot;</code>.</p><div align="center">    <img src="/img/CA-Midterm-1-Review/1712658756754.png" style="max-height:300px; width:auto;">    <img src="/img/CA-Midterm-1-Review/1712658781716.png" style="max-height:300px; width:auto;">    <figcaption>string1 ends with '\0', string3 is only readable</figcaption></div><h4 id="Further-explanations">Further explanations:</h4><ul><li><p><strong>What do these below mean? Be really careful!</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> arr[] = [ <span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>] ; <br><span class="hljs-type">int</span> *p = arr;  <br><span class="hljs-type">int</span> (*p1)[<span class="hljs-number">5</span>] = &amp;arr;  <span class="hljs-comment">// p is a pointer, including 5 int elements, refering to arr.</span><br><span class="hljs-type">int</span> *p2[<span class="hljs-number">5</span>];<span class="hljs-comment">// p2 is an array, including 5 int pointer.</span><br><span class="hljs-type">int</span> (*p)(<span class="hljs-type">void</span>);<span class="hljs-comment">// p is a pointer pointing to a function which accepts nothing.</span><br><span class="hljs-type">int</span> (*func arr[<span class="hljs-number">5</span>])(<span class="hljs-type">float</span> x);      <span class="hljs-comment">// func_arr is an array, including 5 function pointers, and they all accept float.</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Be carefull abt pointer in function</strong></p><table><thead><tr><th><code>void inc_ptr(int *p) &#123; p = p + 1; &#125;</code></th><th><code>void inc_ptr(int **h)&#123; *h = *h + 1; &#125;</code></th></tr></thead><tbody><tr><td><code>int A[3] = &#123;50, 60, 70&#125;;</code></td><td><code>int A[3] = &#123;50, 60, 70&#125;;</code></td></tr><tr><td><code>int *q = A;</code></td><td><code>int *q = A;</code></td></tr><tr><td><code>inc_ptr( q);</code></td><td><code>inc_ptr(&amp;q);</code></td></tr><tr><td><code>printf( &quot;q = %d\n&quot;,*q)</code></td><td><code>printf( &quot;q = %d\n&quot;,*q)</code></td></tr></tbody></table></li></ul><div class="note note-success">            <ol><li>q = 50</li><li>q = 60</li></ol>          </div><h4 id="Point-past-end-of-array">Point past end of array</h4><ul><li>Array size n; want to access from 0 to n-1, but test for exit by comparing to address one element past the last member of the array.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> ar[<span class="hljs-number">10</span>]=&#123;&#125;,*p, *q, sum=<span class="hljs-number">0</span>;<br>p = &amp;ar[<span class="hljs-number">0</span>]; q = &amp;ar[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">while</span> (p!=q) <span class="hljs-comment">/* sum = sum+*p; p = p+1*/</span> <br>sum += *p++<br></code></pre></td></tr></table></figure><ul><li>C defines that one element past <strong>end of array must be a valid address</strong>, i.e., <code>&lt;span style=&quot;font-weight: bold; color: red;&quot;&gt;</code>not causing an error</li></ul><h2 id="C-Memory-Managemen">C Memory Managemen</h2><img align="right" src="/img/CA-Midterm-1-Review/1712563732459.png" style="max-height:200px; width:auto;"><ul><li><strong>Stack:</strong> automatically resize itself upon function invocations. (StackOverflow)</li><li><strong>Heap:</strong> this part is used for dynamic memory allocation. (malloc, free)</li><li><strong>Static Data:</strong> Global and static variables, allocated in compile time.</li><li><strong>Code:</strong> Contains code of the program, immutable. Also called text segment.</li></ul><h3 id="Where-are-Variables-Allocated">Where are Variables Allocated?</h3><ul><li><p>If declared outside a function, <code>&lt;span style=&quot;font-weight: bold; color: red;&quot;&gt;</code>allocated in static storage</p></li><li><p>If declared inside function,<code>&lt;span style=&quot;font-weight: bold; color: red;&quot;&gt;</code> allocated on the stack  and freed when function returns</p><ul><li>main() is treated like a function</li></ul></li><li><p>For the above two types, the memory management is automatic</p><ul><li>Don’t need to deallocating when no longer using them</li><li>A variable does not exist anymore once a function ends!</li></ul></li></ul><h2 id="RISC-V">RISC-V</h2><p>Seek for more details: <a href="%5Cimg%5CCA-Midterm-1-Review%5Criscvcard.pdf">RISC-V Green_card</a></p><h2 id="Combinatorial-Logic">Combinatorial Logic</h2><ul><li>Be careful:<div class="note note-danger">            <p>$$<br>\begin{equation}<br>\begin{gathered}<br>A = A + A\overline{D}\\<br>\text{DeMorgan’s Law: } \overline{AB} = \overline{A} + \overline{B}, \overline{A+B} =  \overline{A}\ \overline{B}<br>\end{gathered}<br>\end{equation}<br>$$</p>          </div></li></ul><h2 id="4-Sequence-Logic">4. Sequence Logic</h2><ul><li>Some terminology:<ul><li><strong>Clk-to-q:</strong> (t_prop) is the time for a signal to propagate through a flip-flop.</li><li><strong>Propagation delay:</strong> (t_combinational) is the longest delay for any combinational logic (which by definition is surrounded by two flip-flop)</li><li><strong>Setup time:</strong> (t_setup) is the time before the rising clock edge that the input to a flip-flop must be valid.</li><li><strong>Hold time:</strong> The minimum time during which the input must be valid after the clock edge</li></ul></li></ul><div align="center"><img src="/img/CA-Midterm-1-Review/1712566491323.png" style="max-height:200px; width:auto;"></div><div align="center">    <img src="/img/CA-Midterm-1-Review/1712579855004.jpg" style="max-height:300px; width:auto;">    <img src="/img/CA-Midterm-1-Review/1712580603850.png" style="max-height:300px; width:auto;"></div><div class="note note-info">            <p>Therefore, to be more SPECIFIC:</p><p><strong>Clk-to-q:</strong> when there is a rising edge, output propagate this time.<br><strong>Setup time &amp; Hold time</strong>, during which the input should be stable.<br><strong>Also note that:</strong><br>Combinatorial logic also has delays.</p>          </div><p><strong>(Setup time violation)</strong> In a SDS, a system the clock period (or cycle time) must be at least as large as</p><p>$$<br>\begin{equation}<br>\begin{gathered}<br>t_{\text{prop}}(t_{\text{clk-to-q}})+t_{\text{combinational}}+t_{\text{setup}}\leq \text{min clock period}\\<br>\text{Max frequency = 1/min clock period}<br>\end{gathered}<br>\end{equation}<br>$$</p><p>(Hold time violation) In a feedback SDS(circuits contain register to register propagation), the hold time must not exceed:</p><p>$$<br>\text{hold time}\leq t_{\text{prop}}(t_{\text{clk-to-q}})+t_{\text{combinational}}<br>$$</p><p><strong>E.G</strong></p><div align="center"><img src="/img/CA-Midterm-1-Review/1712642904789.png" style="max-height:200px; width:auto;"><figcaption>Example of Setup & Hold time</figcaption></div><div class="note note-success">            <p>Solution:</p><p><strong>Setup time</strong>: the critical path of “outer” combinational circuit.<br><strong>Hold time</strong>: The shortest path including self register.<br><strong>ATT:</strong> Evaluate each register separately</p>          </div><div align="center">    <img src="/img/CA-Midterm-1-Review/1712643481109.jpg" style="max-height:200px; width:auto;">    <img src="/img/CA-Midterm-1-Review/1712643484417.jpg" style="max-height:200px; width:auto;">    <figcaption>Example of Setup & Hold time</figcaption></div>]]></content>
    
    
    <categories>
      
      <category>CA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CA</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
